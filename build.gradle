import java.nio.file.Paths
import java.time.LocalDateTime

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
}

group 'edu.utica'
version '1.0'
sourceCompatibility = '17'

def packageReadProps = {
    Properties properties = new Properties()
    Paths.get(System.properties.'user.home','.credentials','githubPackagesRead.properties').withInputStream {
        properties.load(it)
    }
    return properties
}.call()

repositories {
    mavenCentral()
    maven {
        url = uri('https://maven.pkg.github.com/utica-iits-ais/*')
        credentials {
            username = packageReadProps.username
            password = packageReadProps.password
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

//    implementation 'edu.utica:jobsub-starter:1.0'

    implementation 'edu.utica:jobsub-job-starter:1.0'
    implementation 'edu.utica:jobsub-datasource-starter:1.0'

    implementation 'com.opencsv:opencsv:5.6'

    implementation files('libs/ojdbc8.jar')
    implementation files('libs/gurjbif.jar')

}



def job = 'GYRJSTP'
def oneup = '9999999'
def dbProps = {
    Properties properties = new Properties()
    Paths.get(System.properties.'user.home','.credentials','userProduction.properties').withInputStream {
        properties.load(it)
    }
    return properties
}.call()

task runParameters() {
    configurations {
        sql
    }
    dependencies {
        sql files('libs/ojdbc8.jar')
    }
    doLast {
        configurations.sql.each {
            gradle.class.classLoader.addURL(it.toURI().toURL())
        }
        groovy.sql.Sql.withInstance(dbProps) { sql ->
            def sysdate = java.sql.Timestamp.valueOf(LocalDateTime.now())
            sql.execute('delete from gjbprun where gjbprun_job = ? and gjbprun_one_up_no = ?',[job,oneup])
            sql.withBatch(10,'insert into gjbprun(gjbprun_job,gjbprun_one_up_no,gjbprun_number,gjbprun_activity_date,gjbprun_value) values (?,?,?,?,?)') { ps ->
                ps.addBatch(job,oneup, '01', sysdate, '2223')
            }
        }
    }
}

bootRun {
    dependsOn(runParameters)

    mainClass = 'com.sct.messaging.bif.banner.BannerBatchProcessor'

    jvmArgs = [
            '-Dbatch.processor.class=edu.utica.jobsub.Gyrjstp',
            '-Dspring.profiles.active=DEV'
    ]

    args = [dbProps.user + '/' + dbProps.password,dbProps.url,oneup,job]
}

jar {
    enabled = false
}

bootJar {
    mainClass = 'com.sct.messaging.bif.banner.BannerBatchProcessor'

    enabled = true
    archiveBaseName = job
    archiveClassifier = ''
    archiveVersion = ''

    into('buildscript') {
        from {
            project.buildscript.sourceFile
        }
    }

    into('src') { srcSpec ->
        sourceSets.each { srcSet ->
            srcSpec.into(srcSet.name) {
                from {
                    srcSet.allSource
                }
            }
        }
    }

}

